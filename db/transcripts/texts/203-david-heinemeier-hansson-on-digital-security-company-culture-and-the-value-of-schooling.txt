

JUNE 19, 2018 BY TIM FERRISS
The Tim Ferriss Show Transcripts: David Heinemeier Hansson on Digital Security, Company Culture, and the Value of Schooling (#203)


Please enjoy this transcript of my second episode featuring David Heinemeier Hansson, creator of Ruby on Rails, founder and CTO at Basecamp, and the best-selling co-author of Rework and Remote: Office Not Required. 


#203: David Heinemeier Hansson on Digital Security, Company Culture, and the Value of Schooling

Tim Ferriss: Hello ladies and germs, boys and girls. This is Tim Ferriss and welcome back, in my creaky chair, to another episode of the Tim Ferriss Show. As per usual, we’ll be discussing the tactics, tools, habits of a brilliant individual, world-class performer, as I usually say, and this is no exception. You might remember our guest, David Heinemeier Hansson, often referred to as DHH from an earlier episode. He’s back for a Round 2 because his episode is about to cross a million downloads, and that’s in barely two weeks. So I had to bring him back. You had a million questions we didn’t get to last time.

If you missed the first round, DHH, @DHH on Twitter, is the creator of Ruby on Rails. He’s the co-founder and CTO at Basecamp (formerly known as 37signals), and is the bestselling co-author of Rework and Remote, subtitle, Office Not Required. Because three hours wasn’t enough the first time – it went really fast – DHH spent another hour answering your most popular questions and most uploaded questions.

In this episode, he discusses digital security, the value of schooling, three questions you should be able to answer, company culture, how the hell you piss if you are in a 24-hour car race, and much, much more. So as always, please enjoy this episode with David Heinemeier Hansson.

DHH: Shelton asks: What skills does he think are most important today as college or graduate degrees worth it?

So I have a conflicted relationship with official schooling. Whether that’s even high school, but certainly also college. I used to have, perhaps, a more unrefined opinion of it, which was, for example, as it obtains to business school, that it so totally was not worth it. I’ve come to appreciate some of the aspects and some of the things that I was exposed to a little more though over the years.

But it’s all in the context of how you acquire that knowledge. So for me, in Denmark, college is not only free, you’re getting paid to go. You get – let’s see if I can do the math in my head. You get $400.00, actually more than that. $600.00 a month or something like that to go to school. Maybe even a little more than that. Anyway, enough that you can cover almost, sort of, your basic living expenses. Most people supplement with some work on the side and I certainly did, but it’s not an overwhelming requirement and then there’s also government-assisted loans that have sort of a low cap that won’t trap you into a debt trap.

So I’m evaluating my college experience against that. I came out on the other side having been paid for the time I spent there and I did not end up with a mountain of debt.

If you do the same thing in the U.S. and you come out on the other side with $100,000.00 or $200,000.00 or any other amount in real student debt, and these answers might not apply as directly. Self-study might be a better answer. But what I did like, to get back to the point, about my college exposure was all the things that I perhaps wouldn’t just have gotten into on my own. I got a good, basic understanding of organizational theory, organizational models and Maslow’s theory, and all these sort of, the basic canon of business administration and the world that it is.

Where we ended up with how to run Basecamp was in many ways the opposite. We didn’t follow many of the prescriptions. But knowing about them was actually helpful in establishing where we choose to be different and where we wouldn’t have to invent the deep dish again and we could just follow tradition.

Where we totally went, well, traditional is stupid – I gave a talk at Stanford Business School quite a few years ago now, called “Unlearn your MBA,” because what I got was part of an MBA, lots of overlapping theory on both economics and organizational theory. Lots of the things that I learned, I’m glad that when I learned them I wasn’t an impressionable 18-year-old. I think that’s one of the differences about going to college in the U.S. versus in Denmark.

I didn’t go to college right away. I stayed out of school for three or four years after high school and worked in the internet industry, which was just enough time to get me totally jaded about organizational theory and innovation and disruption and all these other key words and buzz words that would then be thrown around in business school with a serious face.

I was jaded enough to have a very critical mind. I wasn’t being programmed. I was trying to filter everything that I learned through the lens of real life and real experiences. That made it much more effective, I think, in terms of figuring out what should stick and what shouldn’t stick and what should I not just have a skeptical opinion about, but be in direct opposition to. I find that’s a great way to define who you are and what you believe is not just the positive things, “I am for this.” But also, “I am against this. I want to do the opposite of that.”

I think I actually learned more from business school by saying, “All these things? I’m not going to do that. We’re not going to work like that. I think that’s stupid or mean or bad in any form and we’re going to do something else.” I think that really was worth it and so was the exposure to philosophy.

I’d say where I got the lease out of it actually was on the computer science part. As I said, it was a joint degree in computer science and business administration. The computer science part just was – I found more value in self-study. I think the opportunities that we had even at that time, early 2000s, of open source software and tinkering on your own and building your own systems was a much better way for me to learn. In large part, because I learned my technical things or skills through using them in anger.

It wasn’t like I sat down for a lecture and then like, “Oh, yeah, okay. I wonder how I can use this one day?” No, it was trying to build this specific thing. What do I need to learn to do that? That worked really well for the specific, technical attributes of it. But that doesn’t work that well for philosophy. It’s harder to figure out what you don’t know about what you don’t know.

Getting exposed to the disciplines of liberal arts and life in that sense was really helpful. The same actually goes for economics and organizational theory. That there are some practical theories and models and ways of thinking that you may not want to use them, but your mind is better by knowing them. I mean, I shouldn’t slander programming and computer science totally in that boat. There’s also plenty of value in computer science about knowing different models and paradigms of thought.

If you know functional programming versus procedural programming and [inaudible] programming, understanding sort of the broad tectonic plates in your domain is definitely very helpful. So, I’ve warmed up to schooling over time. And perhaps part of that is perhaps because I realize that more of it stuck than I thought.

That I would sit through some lecture and I’d think during the lecture, “Jesus, this is stupid. I’m never going to use this.” Years later, it would come up that, “Oh, that’s actually similar to that one thing.” I would at least have knowledge of which thread to pull on further. I wouldn’t necessarily remember the whole lecture, but I’d know where to go to learn more and inform myself more about these things.

I think the main value there is just opening your mind to a broader window on the world and a broader window on life, to be honest, especially as it comes to these softer skills. STEM is a big rah-rah moment for a lot of people in technology and lots of people make fun of history or philosophy or languages and so on. I got like, “You’re wrong.”

My No. 1 takeaway from going to college and spending time there and so on was to come out on the other side not as a more efficient worker, but as a better human. As a more well-rounded human being for a long life. That notion of the long life thing is quite accurate. There’s several times during the three-year degree where I went, “Ah, shit, I’m wasting my time.” But you know what? Really, over three years compared to what? The next 80?

There’s probably limits to just how much I’m wasting my time. And when there weren’t limits, when I really thought something was a complete and utter waste of time, I just wouldn’t pay attention. I’d just accept my bad grades and I’d spend that time on something else and that was wonderful too.

Rodolfo Geant asks: Does DHH believe that self-writing code will be a reality soon? AI writing its own code like Skynet? If so, when would that be?

That’s a really interesting question that traces back a long time. When I was going through business school – I have a joint degree in computer science and business school – one of the things we looked at the time was something called “Case Tools,” where you would basically outline your requirements for a piece of software and then the software would figure out how to write that piece of code for you. That has a long tradition going back, ‘90s, in the ‘80s, where people thought, oh, we’re just on the cusp of figuring out when humans don’t need to know code anymore.

We will then arrive at a place where they can just describe their requirements and voila, the software will be produced for them. I can totally see the appeal of that, obviously, right? We have moved there to some extents. Computer programming started as an assembler and punch cards and a very low level way of describing your program until we built abstraction upon abstraction upon abstraction on top of it.

Now today we’re sitting with software in environments like Ruby, where you are describing what you want to happen at a very high level. But obviously that’s still a fair jump to just a natural, English description of the software. That’s where it really breaks down for me. That’s why I don’t see computer written software as something that’s just around the corner, because writing software is really about making decisions. You can really only have something auto-generated for you if you’re willing to cede a certain set of decisions.

We’ve already gotten pretty good I’d say at building those abstraction levels up to a point where the decisions we’re left to deal with – and certainly this is my aspiration with Ruby on Rails – are the decisions we care about.

If you find a set of decisions that you just don’t care about, you just don’t care about how that level of the code is implemented, then you can abstract and build on top of it. But you can’t just say to a computer, “Hey, can you make me a Basecamp? It needs to have messages and some chat and blah, blah, blah, blah, blah.” Right? Because you’re not going to get the Basecamp that we have. The Basecamp that we have is the product of tens of thousands of little decisions that all, at least in our eyes, matter. Because if they didn’t matter, then someone else would have had to figure that out.

Which I guess is a little bit like if you’re not writing your own software, if you’re asking someone else to write your software for you, you kind of try to do this, right? You pretend that you can tell another group of people through a set of requirements; can you build me this thing? Then they’ll build you something that’s close enough to what you want. Ask most programmers or designers how well that typically goes.

It’s a very painful process for a lot of consultants and people who live off trying to implement other people’s requirements because it’s a really fussy process. It’s really fussy to narrow down what it is that you really want. It turns out, certainly for us when we’re software builders, the thing that we really want is those 10,000 decisions all made right. It’s not just one or two or three things. Even if we could get to the point where AI could write software on its own, how would we specify the requirements? That’s where it really stops for me.

Again, that doesn’t mean this won’t happen and maybe AI will become so smart as to be basically that black box and perhaps we won’t get exactly the software that we want, but it’ll be close enough and it’ll be so much more efficient. I don’t see that as around the corner. By around the corner, I mean 10, 20 years.

Funnily enough, of course, that has been the horizon for AI in general, it seems, for about the existence of computer science and perhaps even before that. That we thought we’re just 10 or 20 years away from having this AI. If you look at what AI is today, I think that’s a very flattering term for a lot of systems that really aren’t that smart. Try to talk to your Amazon Echo or Google Home and pretty quickly the Turing test breaks down or rather, it just fails it, right? Who knows what’s going to happen in 30 years. I don’t think anyone can predict that.

But I don’t see it on the close horizon. I don’t see wanting it as long as I care about all the thousands of little decisions that go into it. Because I think we’ve arrived at a point where there are plenty of decisions I don’t care about. I don’t care about decisions about memory management, largely speaking, until it’s a major issue.

It very rarely is in the kind of work that I do. So, I can abstract myself from, say, releasing memory by hand, as you used to do in some programming languages that are closer to the metal, so to speak.

Martin Shorter asks: What are his thoughts on building a company culture?

Culture is one of those words that has gotten almost too tainted to be useful, because culture is now sort of a slogan for all sorts of bullshit. Culture is a ping-pong table. Culture is a mission s treatment. Culture is all these external artifacts, which maybe those are results of culture.

I don’t think they’re culture itself. I think a far more interesting definition of culture is the things that we do over and over again. It’s hard to just write that up before and say these are the things we’re going to be.

Because what happens often is, of course, you don’t live up to that stuff. I find the definition of culture far more interesting as a historical expedition almost. Like, these are the things that we do. So you start doing a bunch of things as a company and your definition of culture should be a retrospective of what are those things? What are we doing as a company and as the culture that we have? Do we like that? So culture becomes an iterative process where you keep looking back at what you did and then you make changes when you see things you don’t like. We certainly had a lot of that at Basecamp over the years.

Where we would look back at certain policies or certain ways we were doing things and say yeah, that’s currently a part of our culture, but not flattering parts of the culture, so let’s change them. Then we would have other parts of the culture and go like, hey that’s really working.

We should do more of that. Not only should we do more of that, we should spread that as a gospel to other companies so they too can benefit from this aspect of our culture. That’s what the books that we wrote, Remote and Rework, are about. They’re taking the aspects of culture that Basecamp had and has and say, we can share those with other people in sort of snippets. We can say, okay, we’re going to have a culture of no overwork. We’re not going to have a culture of workaholics. In fact, in Rework, we say “Fire the workaholics.”

So we want to have a place of work where 40 hours or less is what’s expected of people. So that becomes part of our culture or is part of our culture, and they we sort of observe that and then extract it. I think there are times where we say okay, we have some aspirations, but they’re based off, again, history.

Of us looking at things we’re doing and saying, that’s not working; we want to do something else. But it doesn’t really become part of the culture before we actually do that. I think a lot of people think that you can just describe this utopia that you want. That’s your culture. Like, “We ascribe to be the best in quality. We’re all about quality.” Well, that’s a meaningless statement. It’s worse than a meaningless statement if it’s not true. There is nothing worse for the integrity of a culture than a description of culture that does not match. It is incredibly corrosive to have company leaders or company descriptions that do not mirror reality.

We just stumbled into this, again, at Basecamp, when we hit 50 people and we realized that in addition to all the books we’ve written and so on, there are still all the matters of culture and practical perceptions of things at Basecamp that are harder for a new person who comes in, a new hire, to learn in a quick order.

We have very much an oral culture at Basecamp and a historical culture, where we did things at certain points and that formed part of ethos, but that takes a long time to adopt as someone new. So, we thought to make things a little more explicit and we wrote up an employee handbook. That employee handbook included all sorts of different aspects of prescriptive culture. But the most important, I think, was a warning saying, “If you’re finding things in your actual work that do not match this description of things, you have to stand up and say so.”

So that we will not become a company – and again, that’s more prescription again than description – I don’t know. I’m flattering myself and that’s always easy to do.

But I’d like to think that we do sort of try to live that. That even when we have aspirations and we don’t live up to those aspirations, we’re honest about it and we can talk about how we failed, such that we can get closer and try again. We already got feedback on that. We wrote things up in that employee handbook where someone new joined the company and said, “You know what? That’s not my experience. That’s not what I saw.” And I find that’s just one of those unique, beautiful gifts that new employees and new eyes can give you.

That they see things much closer to how they really are than the people who’ve been steeped in the culture for a long time and have sort of just accepted all the illusions and delusions that build up over time. When you get someone with fresh eyes in, they can just go like, “Hello? Guys? This isn’t right. This isn’t working.” Or “This isn’t clear.”

Or, on the flip side, “This is really working. Wow, you guys are really different when it comes to this one aspect. I haven’t lived through that before.” I think we have a fair amount of that at Basecamp too, where we need, essentially cultural reprogramming. Especially for people who’ve worked in more corporate environments. Basecamp is quite different from those environments and it can be hard when you transplant from one culture to another. A lot of it is not just about learning the new culture, it’s about unlearning the old culture.

You have to respect that. You have to give that some time. You have to be explicit about how those transitions happen and to say that they matter. I think that’s sometimes the dichotomy that companies and people find themselves stuck between is that either they’re paying lip service to culture and culture is a ping-pong table and culture is a mission statement or a slogan. Or they go over in the other ditch and say culture doesn’t matter at all; it’s just about the work.

Which is, funny enough, one of the aspects of our culture and sort of a different area of the company. But culture is real and it matters. You can’t just program it up front. It has to be run. It has to be actually lived to be real.

Nate Perkopik asks: What things does he do to ensure his digital security, password managers, etc.

This is one of the things I’ve gotten a lot more interested in over the years. When I started with computers, I was completely ignorant of security and sort of thought that it was overstated and who would want to know my secrets?

Who would want to read my email? I think even though before, just starting to hear about people getting hacked or getting the sense that this is real. Then I think, of course, Snowden and his revelations about governments around the world, particular in the U.S., are invading everyone’s security and privacy, really brought things to the forefront.

I think we’ve gotten, and I’ve gotten, a lot more serious about ensuring things don’t go over email or other insecure ways. For the specifics, I use one password. I use one password both personally and with my wife and at the company. That’s not a perfect story. I think password managers, especially the ones that share things through syncing, still have a ways to go. But it’s way better than trying to either (a) remember a thousand different passwords, which no one does anyone, or (b) just use a small handful of passwords that you keep reusing over and over again.

So that was a pretty, not that recent, but a few years ago that switching to a password manager. I had some passwords for an embarrassing long amount of time.

Just seeing site after site getting hacked really brought that to the forefront. On top of that, of course, encrypt everything. This notion that when you turn off your computer, or even when it goes to sleep, and the same with your phone, that it could be lost, is such a revelation. I remember when in college someone would lose their laptop and they’d go like, oh shit, I lost all my stuff. Like that person is going to have access to all my stuff. That was such a terrible thing.

I think we’ve really moved forward as a society by now you can lose your computer or your phone and it doesn’t mean losing all your data to some criminal and not worrying about who’s going through your photos or who’s going through your emails or whatever else. So encryption on all the things. I find it really disappointing, to be honest, that when you buy a new Mac, full disk encryption is still not turned on.

It’s something that everyone should turn on immediately if they haven’t. That doesn’t just go for laptops, but it also goes for your desktop computers. People have their houses broken into all the time. So go to system preferences, security and privacy, and then file vault and look to see whether that’s turned on. And if it’s not turned on, turn it on immediately. Two-factor authentication is another huge one, especially on your email account. If you have an email account right now that’s only secured by a password, especially if that’s not a strong password, it’s just one you remember, you’re just waiting to get screwed.

Because if someone gets into your email account, then they have access to everything, generally speaking. They can reset your password on any other site and they can get into everything and you will be owned and it will be very painful. So I use Gmail and use their two-factor authentication, which basically just means when I’m trying to log in to Gmail on a new computer or occasionally, I need second device, I get a code and then I can log in from there.

So that’s been a huge step up. I’ve turned that on. Everywhere you can turn it on, certainly turn it on. For things like your bank and your email and I have it on for Twitter and you turn it on for your Apple ID and you turn it on basically anywhere you can. Now it’s at the point where a site doesn’t have 2FA, I’m like, oh, shit. I hope I don’t have to put anything important in here. I’m really glad that we got 2FA into Basecamp quite a few years ago, because I wouldn’t feel good about using a service where I have to store important information without 2FA there. It’s still shocking to me that to this day and age, I’ll still sign up for a new service and maybe they won’t even have 2FA, but they’ll also put retarded restrictions on your password. Like, it has to be only 12 characters.

I’m like what? I’m using one password. I’m using a password manager. Let me have my 25-character mixed password and put that in there. So yeah, encryption and 2FA and a password manager, I think that’s sort of the basic trifecta. If you don’t have those things in place right now, get them. Not just for the sake if you should get hacked, but also just for the sake of ensuring that the governments around the world have access to less of your stuff. The same goes, obviously, for instant messaging.

Use iMessage. Use WhatsApp or even better, use Signal. Don’t use things that send things clear. Text only encrypted in transit. Like Google’s offerings. They have to have a special setting turned on for you to have things encrypted. I think that’s terrible. Don’t use that if you can avoid it. I’d say those are the top things.

Levi Belknap asks: How did he and Jason Fried make the tough decisions to sell off the portfolio products 37signals created, Highrise, Know Your Company, Backpack, Campfire and so on, when rebranded as Basecamp and doubled down on that product? I’m especially in the process they used to think about the decisions and the forces at play that they were facing.

Yes, this was an interesting time for Basecamp. I think we were just under 30 people. We were starting to feel stretched thin. We had four-plus products; four major products and a lot of other [inaudible] going at the time. We had fallen into this habit of basically just thinking we’re okay with Highrise right now, for example.

Let’s just put that on the shelf for six months or perhaps even longer. Then we’ll just focus on Backpack. Or we’ll focus on Basecamp. This rotation just meant that our products would just languish for some time. You don’t feel it right away. Customers, generally speaking, wouldn’t really complain. Like “Oh, there haven’t been any new features for six months.” But it would still seep in. And worst of all, we felt bad about it. We didn’t feel we were doing our products justice. That there was more that we could do and feel better about if, our first instinct, we were more people.

So that led to the discussion of hey, we’re 30 or 40 people right now. We have to be a lot more. If we have four major products and we all want to do them justice and we want to make native apps for all of them. We want to do really good design that we think through. We want to do everything to the peak of our abilities, the best products that we can make.

The best software that we know how. That’s not possible with the company we have today. So we faced the natural – I don’t even call it dilemma because for most people it’s not a dilemma. For most companies it’s not a dilemma. What you see is hey, you have profitable products. They need more people, just hire more people. That’s the natural conclusion, right? Well, not for us. We’ve always wanted to stay a small company and for me in in particular, I didn’t want to run a big company.

I didn’t want to run a company of hundreds of people. I saw just the jump that if we went from, let’s say 30 or 40 people to 80 or 100 people, we’d already be down that path of no return. That we could not then prevent the whole thing from ballooning ever further from there and then we’d be 100 people, then we’d be 200 people and I would wake up in the morning thinking, why am I doing this?

Do I really want to keep doing this? I’m quite sure my answer would have been no. So that led me to the obvious conclusion that the natural path of expansion, the natural path of just hiring more people to deal with more work would lead to a place where I wouldn’t want to be interested in this work anymore; I would want to get out.

As so many people work with startups and new companies do. They realize that they enjoy working with companies of a certain size, let’s say 50 people or less or 30 people or less. And then they just go with the flow and they end up with a large company and they think, okay, it’s time to start over. Well, I didn’t want that. We had some pretty heated discussions for a while.

We had some discussions where Jason in particular accurately said “Hey, we have these principles of wanting to make the best products and work of our life and we cannot do that if we’re stretched so thin. So we need more people, otherwise we can’t do it.” And me going like, “Yeah, but no. I don’t want to run a big company.” Push, push, push, push, push. Well, Jason then called a small group of together in Chicago to think about a big alternative.

That big alternative, of course, was becoming Basecamp. That we would take all these additional products that we have, all these extracurricular activities that were spreading us so thin and we would simply get rid of them. Not get rid of them as just flush them down the toilet, but get rid of them as in spinning them off, as we did with Know Your Company and Highrise, to great effect. Or roll it into the main product, as we did with Campfire. Or even just shut it down in the sense of not accepting new customers, as we did with Backpack.

We just sat at that meeting and thought, yes, this is the right thing to do. It’s not the economically right thing to do. We could certainly have been better off and had a bigger business if we just had said you know what? We’re just going to hire a bunch more people and we’re going to direct those people to keep improving all products at the same time with no stalls and stops. But why? We’re already a big enough company. We’re already making enough money.

Jason and I are interested in Basecamp because we want to be here for the rest of our working life. That’s been the goal from the get go. That we wanted to design a company that we would be comfortable working at. Not just comfortable, but happy working at for the rest of our lives. So that’s how you get to these weird conclusions. Where you go like hey, we have this awesome, profitable business, let’s say Highrise, for example.

Highrise was almost at the level where Highrise alone we could have run the whole company off that. And we went like, well, we’re going to spin it off. We’re not going to work on it anymore. Backpack, which had made millions of dollars, we basically said, you know what? That was a great run. It’s now behind the times. We’re going to park it. We’re going to make it part of our legacy. As part of that legacy, we came up with this saying that we’re going to keep things around until the end of the internet. That someone, for example, who used Backpack was not going to wake up one morning to a sunset. They’re not going to wake up to a fake sunset as it always is, of course. Some sort of, oh, it’s been an incredible journey, now pack your shit and get out of here because Backpack is shutting down. I had seen all sorts of companies from Google, Google Reader, and many others, countless others, almost all others working in our industry when they decided they didn’t want to work on something anymore, they just pulled the plug.

Users be damned and workflows be damned and that just wasn’t us. To this day, we still have people using Backpack. We still to this day have people using Ta-Da List, which was a simple to-do list manager we launched in 2005 and shut down, I don’t know, a couple years later. And we still have people using it. I’m really proud of that. I’m proud of the fact that we – years and years and years later can maintain our legacy while still having one major focus – Basecamp. That one product.

So those were some of the dynamics that were going on at the time and I think, looking back at it now, I just go like, of course. Of course we should have done that. Of course this was the right answer. Of course we actually went too long. But that’s how things change in business. Where we started out with an idea.

We didn’t know Basecamp was going to take off like this. We didn’t know Basecamp was just going to keep on growing and growing and growing as it has. So when we started out, we were hedging our bets. We launched other products, in part thinking Basecamp might just be a fluke. It might just go out of business and we’d better have some other ideas. That’s a good strategy, I think, in the beginning as we were hedging our bets. But then one of the bets just turned out to pay off so spectacularly that it was almost negligent to keep that strategy, keep that original hedging bet strategy.

We needed to double down on the thing that was clearly working so much better than everything else, lest we let that slip through our fingers. So there it was.

Levi Belknap also asks: He and Jason are both very opinionated. How have they managed their relationship as co-founders, especially being remote? Can he share a story about the biggest fights they’ve had as co-founders and how they resolved it? General rules and processes to use when managing disagreement and conflict in their relationship?

Sometimes things get heated. I think things get heated, usually when we talk about specific product things, specific ways of attacking features or how to prioritize things. We see things differently. But that heats dissipates incredibly quickly between Jason and I. I would say because we also come back to the fundamentals, the fundamentally shared principles we have for the kind of company we want to build and for the kind of product that we want to build.

So when you sort of strip things back to first principles and see like, wait a minute. How deep does this agreement go? We find that most of our disagreements actually lay at the surface. If you just keep digging and you keep scratching, as we talked about on the podcast, then you find the common ground. It might just be buried a little further down, but it’s there. Because if it’s no there, then you have deeper problems anyway, right? Then things wouldn’t last for this long.

But on top of that, we’ve used all sorts of specific tactics to resolve these surface tensions. One of the tactics that I particularly like and we’ve used for a long time is, who cares most? So when we go into a disagreement, sometimes it can get pretty hot, but usually there’s one person who cares more than the other person. We’ve set up a give-and-take system where whoever cares most, if the discussion goes long wins.

That means that sometimes I can care a fair amount about something and then just still say, all right, I’m going to let it go. Jason, you do it. Then he does. Then the next time, perhaps I’m the one who cares the most and we go with my side of things. The majority of the time we then argue, argue, argue; get heated, heated, heated. Then everything calms down. We perhaps take a day away from it, come back to it and then we’re all on the same page.

So even those areas or times where we have to basically just concede a point, they’re pretty rare. When they happen, it’s fine. It’ll play fine. Over 12 years, you’ll have some, I’ll have some. Everything will be just fine. Another tactic to use when you have disagreement is, who’s going to do the work? If I have strong opinions about how a piece of design is supposed to be implemented, well, if it’s Jason who actually has to do the work and corral the troops and designers that he’s working with, he just has a natural advantage there. He has naturally higher ground.

It doesn’t mean he’s always right. It doesn’t mean we’ll always go that way, but I’ll concede the point more often than not when it falls into his specific wheelhouse, which is design. The same thing goes with programming. We talked about lots of features in Basecamp where it’s mostly a technical challenge. As the technical person or the programmer of the two of us, I get to have the higher ground when it comes to technical matters.

So I think we have a great mutual respect for that expertise that each of us hold. Well then, of course, we also have the overlap areas where it’s about generally running the company or marketing or anything else like that. We can’t really use higher ground in those scenarios because it’s more even ground we’re being met on. But that also means that either we use that other principle of who cares more about it, or, as it happens in most cases, neither of us end up being that passionate. Then if you talk about it for just a little while longer, then it resolves itself.

Finally, I’d say we employ the same tactic that we encourage everyone at the company to employ, which is to stop talking and start making. When we have disagreements about which way to go, just trying it usually resolves things very quickly. So if it’s about a feature in Basecamp, then you have to implement it and see how it feels and see how it works.

If it’s about a marketing strategy, just find the smallest way you can get a disprovable test going and then try it. And if I think something is not going to work and we try it and it doesn’t work, okay, so what? We wasted a little bit of time? We wasted a little bit of money? No big deal. If we can try something I don’t think is going to work and it works? Again I win. So if you look at it from that perspective, you can “win.” You can get to the great outcome in all cases.

Whether you’re right or whether you’re wrong, you still win. If you’re right, then we’ll carry on with that idea. If you’re wrong, then hey, that great idea made it through even with your position.

Levi Belknap asks: David is a proud father. I would love to hear about his most important lessons learned, the things he does as a father that work well for him and his children. How does he know that he’s being a good father? How does he measure himself?

Well, we talked about this at some length on the podcast. But I look at this on the broad scale, at the top level in much the same way I look at everything else, which I’m sure is a limitation that I have one pair of glasses to see most of the world which is, how would I feel if I was in Colt’s shoes? I, for whatever reason, have a pretty good memory of what it was like being a four-year-old and the things that I found unreasonable.

So to me, it’s not that much of a stretch to put myself in Colt’s shoes and to see where things go from there. So I try to think about things from that angle. Is this reasonable or is this not reasonable? Even when it’s not reasonable, which is a lot of the times when you’re dealing with three and four-year-olds or smaller kids, can we just let it play out anyway? What’s the worst that can happen here?

If the worst that can happen is Colt is going to get materially hurt, as in broken bones and blood spouting all over the place or death, okay, you don’t get to make that call. If you can just get a little bit hurt, like you can bang your head or you can scratch your knee or whatever, fine. Experience that on your own self. See how it goes. If you want to stay up past “your bedtime,” which is this thing adults impose on kids to tell them when it’s convenient for the adults to go to sleep – fine. You can do that. You can choose on your own.

Sometimes I’ll say, “If you want to just keep being on your iPad, you can do that. You get to sit in the living room by yourself. I’m going to bed because I cherish and value my sleep immensely. So if it’s time for me to go to bed anyway, I’m just going to do that. You can figure out what you want to do.” What usually happens is he’ll continue playing for another 10, 15 minutes, and then he will want to go to sleep too.

So I think there’s a lot of wins to be had when you don’t have to win everything and you don’t have to win right now, and you accept that kids are not only people, but that they have to form their own first-hand experiences. You can’t tell a kid, in most cases, well, if you eat another gummy bear, you’re going to have a tummy ache. Much better for him to just gorge himself on those gummy bears and get that tummy ache and learn for himself that eating a whole bag isn’t that great.

Same thing with the sleep thing. If he wakes up and he’s tired in the morning, well, there’s some feedback. Getting those first-hand feedback loops playing is a far better strategy in my mind than trying to teach them. Teaching those things don’t really work that well, I find. What you can do is offer commentary, suggestions and so forth.

Such that not that they’ll work in the moment, but that when the natural feedback loop plays out, perhaps it’ll ring a bell. Like actually, he said something about me being tired if I stay up all night or I’ll have a tummy ache if I eat this. Some ways for Colt to put things into perspective once he gets those consequences and smacks himself in the face. So how does that really play into measuring yourself as a good father? Is there a scoreboard you can keep? Probably not. You probably won’t know to large extents.

You’ll know the first-hand responses, right? You’ll know whether you’re having a good time and a good relationship in the moment. Do you know how that’s going to play out over the next 20 years? No, you don’t. So you have to sort of just go with your best judgment on that. My best judgment is, how would I feel in his shoes?

Is this reasonable? Can we just let it play out? Can we just let it slide? Which I’m sure for many parents, not only am I sure, I’ve witnessed and heard it from many parents, sound like overly permissive and lax and all sorts of other things. You know what? I’m okay with that. If for no other reason, than one of the guiding principles I have with Colt is how to raise a rebel. I do not want a compliant kid. A lot of parenting is about having compliant kids who will do what they are told and sit still when you ask them to and be proper and blah, blah, blah. You know what? That’s not that high on my list of priorities.

This came to the forefront in part when we tried a Montessori school, of all things, in Spain. We thought at first, well, Jamie had read up a bunch on Montessori and she had given me a good recount. This sounds great. This sounds much better than traditional schooling and playtime and so on.

So we take three-year-old Colt there and he absolutely just hates it. He absolutely hates it. Cries and kicks and screams, like “Don’t want to go! Don’t want to go!” It’s not the first day, not just the second day. For like a week and a half. After a week and a half, we’re like, this is not getting better. What is going on here? Then we had some conversations with the specific school and they’re like no, it’s going to be okay. But let me tell you a little bit about our school. Our No. 1 word here is “respect.” I just went like, oh, shit. Of course that’s not going to work. Really? Your No. 1 word for three-year-olds is “respect”?

As in that they should respect their teachers and they should respect the rules? Yes, this is not going to work. We are otherwise following a path here on how to raise a rebel and that’s just not a good fit for our kid. So we learned from that.

That even if you think they have all the right wooden toys with no bad paint and they can play out in the yard and so on, there’s some structural frameworks about how teachers and adults think about the relationship to kids that are very much at odds with different ways of thinking. So this is one of those cases where we went, this is not the right thing for our family. Then we put Colt in basically a play school, where there was no structured learning where all he did all day was run around on these little motorcycles and play with kids in the yard and painting and other things that were not structured in the same sense.

He loved it and had a great time. I thought, hey, we did a good job as parents here. We did not subject our kid to just like you have to continue doing this even if you hate it, for weeks on end, just because we think this is the right thing for you. [Inaudible]

Madison asks: Self opinion as a kid. Smarter than the rest? Different? Not really?

When I think back, I definitely had lots of domains where I certainly did not feel smart. Ironically enough, what I ended up doing professionally, programming, was one of those. Because most of the time growing up I had older friends and they were into computers and quite a few of them were programmers and they were really good. So what I saw was this huge jump in skill that just seemed insurmountable for me, that this was not me. I couldn’t do those things. In part because I tried somewhat, a little bit, and hadn’t succeeded on the first go, as though anyone ever does.

But then I saw the comparison to these friends I had who were just really good at what they were doing and I thought, geez, this is too hard. I’ve got to do something else. So I never had this “I’m smarter than everyone else.” What I did have though was an innate sense that if a large enough group of people can figure this out, so can I.

I’m not dumber than everyone else. That’s for sure. I don’t sort of ascribe to oh yeah, I’m just a dummy, I can’t figure this out. No, I can figure this out if I apply myself well enough to it. I’m not gifted with something special here. I don’t have some innate talent to do this that gives me a leg up. In some domains, I thought maybe I could become a programmer, but I’m just not going to put in the time. That looks really hard and I could spend my time on other things that perhaps look easier to me and I’ll try my hand at those first.

So it was kind of a dichotomy between thinking I’m not actually that good at a bunch of things, but at the same time, I can also become good enough if I just apply myself. When it came to programming, it was an interesting switch when I then learned how to program.

And again, I didn’t think of myself as a programmer when I first learned to program. Then I started working in open source. After a couple years, I got exposed enough to see that the code that I was putting out and the way I was running projects was working. That was really a comparison that wasn’t available in the same way before the internet and before open source and before getting involved with all those things. I didn’t have a good way of measuring my progress. I would just measure my progress against books or my own sense of self worth. That wasn’t always in tune.

For a long time I absolutely did not have any delusions that I was doing anything that noteworthy. It wasn’t until I got a chance to compare myself openly against a lot of other people and a lot of other projects and a lot of other code that I thought, wait a minute; this isn’t so shabby after all.

The same went with things like driving a racecar. When I first started to drive, I thought geez, I’m actually not good at this. I’m finishing quite far down the totem pole. But a lot of that was pitting myself early against people who were just really good. I think otherwise it’s easy to fall into the trap where you’re just comparing yourself to some little local circle and thinking, I’m the best of my local gang at either programming or playing Magic the Gathering or Mortal Kombat or the race track and then resting assured and happy and satisfied with that. As we talked about earlier, that never had an appeal to me. So I’d rather just think I’m no different than anyone else, but if I apply myself hard enough – not so much just through like oh, you’ve just go to put in hard work – but I don’t even – it’s hard to find the right words for this.

I don’t want to say be smart enough about it. That’s a misnomer too. I didn’t think about myself as particularly smart. But I did think that there are ways of learning that are smart. It’s not so much that I’m smart, but there are some smart techniques and I can just pull those techniques off the shelf and I can apply them. I can end up in a different plan through that.

Ian McGray asks: How does he prep for Le Mans? How does he stay alert behind the wheel for such long periods of time?

Le Mans is a 24-hour race in France that happens once a year. It’s a whole week of fun and game and exhausting times. They start by doing the scrutineering, as it’s called. The check of the cars, the technical check [inaudible] regulations in the town center on the Sunday and then the race is that Saturday. So it’s a really long week and it’s a really exhausting time. You do have to prepare for that.

It’s an interesting sort of way that you do prepare. One of the greatest ways, I think, to prepare for Le Mans is just do a bunch of racing before it. There really is no exercise like actually being on a race track that will stand in for that. That doesn’t mean that’s the only thing you do. Usually ahead of every season, I have a fairly rigorous training program, maybe three times a week. I certainly did this year where I worked with a personal trainer for one hour three times a week and we do strength training and we do endurance training and so forth.

Just to have a general, good fitness level. That’s certainly important. It’s certainly important to just be in good shape. I don’t take it that extreme. I mean, there are definitely professional drivers, certainly the ones that race in the top prototype class, LMP1, that has the toughest physical requirements. They do just intensive, nonstop training. They bike and do all these others things.

I’m not a full-time athlete. To be honest, I don’t enjoy it that much. I exercise because I know it’s good for me. I know afterwards that it feels better. I know that I’m going to be in better overall shape, not just physically but mentally as a human being and because I want things. I want to be competitive at Le Mans and these are the things I have to do. I’ve just found that those things don’t happen automatically for me. I’m not the person who just says, oh, there’s an hour, let me go work out.

So that’s where having a trainer and working on an appointment with someone has been really helpful to me. So I do that. Then it’s the funny thing with Le Mans is that a lot of it is still mental too. It’s not just about the physical preparation for it. I’ve seen plenty of drivers who were in great physical condition still absolutely bomb at Le Mans because they just can’t keep the mental game together.

Part of the mental game is if you’re leading, if you’re close to leading, is the pressure of not making a mistake. That many hours just going around and around and around are going to get to you. Are you trying to reach too high and for too much that you get yourself into one of those mistakes? There is a lot of patience to be played. It’s easy to have that patience perhaps in the first and the second stint. It’s perhaps a little harder to have that later in the game.

That’s when a lot of people make mistakes. You also, of course, have the fact that it is 24 hours. When you say 24 hours, it’s not really 24 hours. It’s more like 36 hours or 40 hours because you get up pretty early that morning. The race doesn’t start until 3:00. So you’ve already been up for a long time by the time the race starts. There’s just a lot of sleep deprivation that actually goes into that specific day.

On top of the fact that you’ve already been at Le Mans for a whole week and that’s tough and that’s physical and that’s challenging. You just have to bring that in because the actual time when you sit in the car and you’re going at it, adrenaline just kicks in. It doesn’t really matter how tired you are. It’s not like you’ll have trouble keeping your eyes awake going 300 kilometers an hour. I’ve had that driving a normal street car, where you just go, I am too tired to actually do that.

No matter how much will I apply to this problem, it’s really hard for me to stay awake. You don’t really have that same problem in a racecar, thankfully, you could say. I’ve never heard of someone falling asleep at the wheel when you’re actually going at it. Things just happen too quickly. But that can sometimes give you a false sense of security. Just because you can keep your eyes open that your mind is open too and that you’re making all the adjustments to your routine as circumstances demand them.

Because driving around in a race track for 24 hours means that the track changes. You have all sorts of things. People go off track. People who are not you, they pull gravel onto the track. You have to make constant alterations. So you have to not just be awake, but have an open mind to changing things and changing things up. I think that is probably one of the hardest things for a lot of drivers that just keeping in that open mode. Not just putting it on auto pilot. Because on auto pilot, that’s when you make a mistake. The next time you come around some corner, there’s a car that’s dragged something onto the track.

Or the track itself just changes. Over the 24 hours, it changes immensely. More rubber goes down or if you have weather or any of these other things. So that’s some of the considerations I put into it. That is why think Le Mans is just the greatest race in the world because it brings these challenges you don’t usually feel when you do a six-hour race or a 45-minute race, for that matter. It’s a unique challenge to make no mistakes and stay on your game for 24 hours.

Stewart Howard Smith asks: Where do you take a piss when racing a 24-hour Le Mans race?

Well, in the seat. That’s the honest truth. I have never in my six years of racing had to pee that bad that I went in my seat. But I guaranty you that lots and lots of drivers have. I was just actually in a ten-hour race in the U.S. a couple months ago and my co-driver god damn peed in the seat. He was in the start of his stint. He’s been out for an hour and I think the realization that he had to be in the car for another two and a half hours, he just went fuck it, I’m peeing in my seat.

And of course the team is laughing and laughing and laughing. And why are they laughing? Well, they don’t have to go into the seat after him. I had to go into the seat after him. One of the mechanics, who was ha ha ha, you’re going to have such a monkey butt when you get out. Because apparently when you sit in other people’s pee for a couple of hours, that’s not that great for your skin. It soaks in through your suit and generally it’s just disgusting.

I think that is one of the drawbacks of team raising when you have multiple drivers in a lineup who have to share a car together, well, it’s more on the other guys if you pee in your seat. At least if you pee, it’s your own pee. So people simply just go. It doesn’t happen all the time. It doesn’t happen frequently, but it does happen often enough that absolutely the consequences of something that most race teams have been in business for a while they know all about.


TAGS
DAVID "DHH" HEINEMEIER HANSSON, DHH
	
